How the MIDI interface for sc-hacks should work.

Notes.

* First objective: Construct midi func that sets a parameter in an environment.
  :PROPERTIES:
  :DATE:     <2017-10-29 Κυρ 19:33>
  :END:

Given the name of the parameter e.g. =\freq=, and an optional argument for the target environment to which this parameter belongs, send the parameter a message naming the type of MIDIFunc to construct. For example:

#+BEGIN_SRC sclang
\freq.cc(1);
#+END_SRC

The above means:
Create a MIDIFunc of type =cc=, listening on cc number 1 and channel 0.  The action function of the =MIDIFunc=, will be constructed as follows:

1. Take the value of the first argument, i.e. the =val= argument which gives the value of the midi controller input from the device.
2. Map the value from the range 0-127 to the range 0-1. (simply calculate val / 127).
3. Map the mapped value from 0-1 to the target range of the parameter.
   - Note: the spec for doing this mapping is obtained from the environment.  *A scheme for storing specs in environments must be implemented yet*. Alternatively, use the name of the parameter to convert this to a spec, or provide the spec as argument to the cc method.  (!!!!)
4. Set the parameter in the environment to the final mapped value obtained from step 3 above.

* Prerequisite: store in environment specs for mapping midi->params

Use get_ put_ methods for this. API:

#+BEGIN_SRC sclang
object.get_(varName, key, func);
object.put_(varName, key, object);
#+END_SRC

Next using this API to store specs in players.  Developing this in very small steps now:

\environment.put_(paramName, \spec, \freq.asSpec);

\environment.get_(paramName, \spec, { paramName.asSpec });

Next step:

How to shorten this further for the end user?

Option:

environment.getSpec(paramName, envir);
environment.putSpec(paramName, envir);

But the end user will want to access environments by their names. So implement this also for symbols.

* Syntax

\parameter <+.environment spec.cc(num, chan, srcID);

* Implementation Roadmap

** parameter <+.environment spec.cc(num, chan, srcID)

parameter <+.envir object

-> object.setParameter(parameter.e(envir))

object is MIDI instance created by spec.cc

** spec.cc(num, chan, srcID)

done.  Example method:

#+BEGIN_SRC sclang
+ Object {
	cc { | num, chan = 0, srcID, func | ^MIDI(this, \control, chan, num, func) }
        /* ... */
}
#+END_SRC

** midiInstance.setParameter(symbol)

** First tests with MIDI cc fun cs

#+BEGIN_SRC sclang
  //: Testing with a CODE 2 controller from LividInstruments.
  MIDIIn.connectAll(verbose: true);
  //:
  \test.push;
  //: First knob on top left corner
  \freq <+ \freq.cc(1);
  //:
  { SinOsc.ar(\freq.kr(400), 0, \amp.kr(0.1)) } +> \test;
  //: Second knob from the top on the leftmost row
  \amp <+ \amp.cc(2);
#+END_SRC
