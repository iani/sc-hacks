{"meta":{"title":"SC Hacks","subtitle":"SC code step-by-step","description":"Gradually introducing recipes from previous SuperCollider libraries","author":"Iannis Zannos","url":"http://iani.github.io"},"pages":[{"title":"About SC-Hacks","date":"2017-06-04T09:29:22.000Z","updated":"2017-06-13T12:45:45.000Z","comments":true,"path":"about/index.html","permalink":"http://iani.github.io/about/index.html","excerpt":"","text":"In this repository, I will review the techniques developed in my libraries for SuperCollider tiny-sc and tiny-inc. I will try to build a cleaner structure step-by-step, and reducing the code to essential features, as far as possible. The code is available in this repository: sc-hacks"},{"title":"categories","date":"2017-06-06T01:27:47.000Z","updated":"2017-06-06T07:28:59.000Z","comments":true,"path":"categories/index.html","permalink":"http://iani.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-06-06T01:24:32.000Z","updated":"2017-06-06T07:25:00.000Z","comments":true,"path":"tags/index.html","permalink":"http://iani.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Operator Design","slug":"OperatorDesign","date":"2017-06-27T07:56:11.000Z","updated":"2017-06-27T07:59:46.000Z","comments":true,"path":"2017/06/27/OperatorDesign/","link":"","permalink":"http://iani.github.io/2017/06/27/OperatorDesign/","excerpt":"sc-hacks uses binary operators to shorten and help classify the coding of common operations such as playing a synth or a pattern. The syntax of a binary operator in SuperCollider is: 1receiver operator[optional: .adverb] argument For example: 12// receiver operator adverb argument&#123; WhiteNoise.ar(0.1) &#125; +&gt;.newenvir \\mysynth Here is a list of operators introduced in sc-hacks.","text":"sc-hacks uses binary operators to shorten and help classify the coding of common operations such as playing a synth or a pattern. The syntax of a binary operator in SuperCollider is: 1receiver operator[optional: .adverb] argument For example: 12// receiver operator adverb argument&#123; WhiteNoise.ar(0.1) &#125; +&gt;.newenvir \\mysynth Here is a list of operators introduced in sc-hacks. List of OperatorsPlanned are 4 operators taking functions as argument, 4 operators taking event as argument, and 5 operators taking a symbol as argument. Currently (26 Jun 2017 08:57) the 8 first operators have been tested. { function } +&gt; synthname play as synth { function } *&gt; synthname play as routine (fork) { function } **&gt; synthname wrap in loop and play as routine (fork) { function } &lt;* key evaluate function whenever value of key is set in envir ( event ) @&gt; patternname play ( event ) @&gt;+ patternname addEvent ( event ) @&gt;! patternname setEvent ( event ) &lt;@ key play next event from EventStream created from event, whenever value of key is set in envir. receiver &amp;&gt; argument set the output bus of the receiver to the input bus of the argument (only the output bus of the receiver changes) receiver &lt;&amp; argument set the input bus of the argument to the output bus of the receiver (only the input bus of the argument changes) receiver &amp;&gt;! argument set the output bus of the receiver to the input bus of the argument, - on a new private bus (both receiver and argument change) receiver &amp;/&gt; argument Copy the output signal of the receiver from its bus onto the input bus of the argument, using a signal copy synth. (neither receiver nor argument changes). receiver &lt;/&gt; argument Copy the output signal of the receiver onto a new private bus, and the signal from that private bus onto the input bus of the argument, using 2 signal copy synths (neither receiver nor argument changes). Examples1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768// ================ Synths//: Start a synth on a new name&#123; SinOsc.ar (\\freq.kr (400), 0, 0.1) &#125; +&gt; \\synth1;//: Replace the synth on the same name&#123; Decay2.kr (Impulse.kr (5)) * SinOsc.ar (\\freq.kr (400 ) * [1, 1.2], 0, 0.1)&#125; +&gt; \\synth1;//: Start a synth on a different name:&#123; Decay2.kr (Impulse.kr (7)) * Blip.ar (\\freq.kr (400) / [8, 7.5], 50, 0.3) &#125; +&gt; \\synth2;//: change freq environment variable value. The synths follow:~freq = 100;//: stop the second synth.\\synth2.synth.stop;//: stop the first synth\\synth1.synth.stop;//: Restart the first synth. This uses the last stored synthdef.\\synth1.splay;//: Restart the second synth. This uses the last stored synthdef.\\synth2.splay;// ================================================================// ================ Routines//: Start a routine &#123; loop &#123; ~freq = 500 rrand: 4000; 1.wait; &#125;&#125; *&gt; \\rout1//: replace this with a different routine&#123; loop &#123; ~freq = 100 rrand: 400; 0.2.exprand (0.5).wait; &#125;&#125; *&gt; \\rout1//: Shortcut for loop &#123;&#125;&#123; ~freq = 50 exprand: 400; 0.1.wait;&#125; **&gt; \\rout1;//: stop the routine\\rout1.routine.stop;// ================================================================// ================ Patterns//: start a new pattern(dur: 0.1, degree: Pseq ((0..7), inf)) @&gt; \\pat1;//: replace the pattern running at \\pat1 with a new one(dur: Pwhite (0.01, 0.1, inf), degree: Pwhite(0, 7, inf)) @&gt; \\pat1;//: add event's contents to the playing event(dur: Pwhite (0.01, 2.1, inf)) @&gt;+ \\pat1;//: testing function in event key// Defer runs the function after the event has played all parameters(func1: &#123;&#123; postf(\"freq param is: %\\n\", ~freq )&#125;.defer &#125;) @&gt;+ \\pat1;//: ================================================================//: ================ More function operators//: Testing function in envir&#123; | freq | &#123; SinOsc.ar(freq, 0, EnvGen.kr(Env.perc(0.01, 0.1, 0.1)))&#125;.play &#125; &lt;* \\freq;//: ========== Polyphony: EventStreams triggered by a pattern playing in currentEnvironment() @&gt; \\pat1;// &#123; ~freq.postln; &#125; &lt;* \\freq; // just as a test;(degree: Pseq((0..7), inf)) &lt;@ \\freq;//: add another stream on a different label(degree: Pseq((0..7).scramble, inf)) &lt;@.label2 \\freq;//: add another stream on a different label yet(degree: Pseq((0..7) + 10, inf), dur: 0.1) &lt;@.label3 \\freq;//: Additional possible operatorsDraft: Within the currentEnvironment NeventWhen one (or any) parameter in the currentEnvironment changes: Play an event (from an EventPattern / EventStream) &lt;@ Play a synth from a SynthPlayer &lt;+ Within an EventStreamPlayer playing within an Nevent (with Event @&gt;) Play an event (from an EventPattern / EventStream) Evaluate a function General principle: 4 types of objects stored under names in environments.Function:play: {} +&gt;.envir \\playerName12345678910111213141516171819202122// Start a synth and store it in \\synth1&#123; SinOsc.ar(\\freq.kr(400), 0, \\amp.kr(0.1)) &#125; +&gt; \\synth1;//: Start a routine modifying the freq parameter&#123; loop &#123; ~freq = 50 rrand: 100; 5.1.wait; &#125;&#125; rout: \\envir;//: Replace the function playing in \\synth1&#123; Ringz.ar (WhiteNoise.ar (\\amp.kr (0.1)), \\freq.kr (400)) &#125; +&gt; \\synth1;//: Start a synth in a different environment&#123; LFSaw.ar(\\freq.kr(400), 0, \\amp.kr(0.1)) &#125; +&gt;.envir2 \\synth1;//: Start a routine modifying the freq parameter in the second environment&#123; loop &#123; ~freq = 400 rrand: 4000; 0.1.wait; &#125;&#125; rout: \\envir2;//: Test the contents of the libraryLibrary.global.dictionary; Accessing SynthPlayers, EventPatterns/EventStreamPlayers, Routines and WindowsThe following messages are used to access a SynthPlayer, EventStreamPlayer, Routine or Window stored under a name in an environment. If no enviroment is specified, then the currentEnvironment is used. symbol.synth(optional: envir) symbol.pattern(optional: envir) symbol.routine(optional: envir) symbol.window(optional: envir) Additionally, the following introspection methods are provided: Nevent:envirs : Dictionary with all Nenvirs stored in Library under \\environments Registry;envirs : Synonym of Nevent:envirs \\envirName.synths : All synth players of Nenvir named \\envirName. \\envirName.patterns : All EventStreamPlayers of Nenvir named \\envirName. \\envirName.routines : All Routines of Nenvir named \\envirName. \\envirName.windows : All windows of Nenvir named \\envirName. Method implementation codeThe code implementing these methods for Symbol in Nevent.sc is: 123456789101112131415161718192021// Return nil if no element found.// Also, do not push the environment if created.synth &#123; | envir | ^Registry.at (envir.asEnvironment (false), \\synths, this);&#125;pattern &#123; | envir | ^Registry.at (envir.asEnvironment (false), \\patterns, this);&#125;routine &#123; | envir | ^Registry.at (envir.asEnvironment (false), \\routines, this);&#125;window &#123; | envir, rect | // always construct new window, and push the environment ^Registry (envir.asEnvironment, \\windows, this, &#123; Window (this, rect) .onClose_ (&#123; | me | me.objectClosed; &#125;); &#125;)&#125; Tests, examples1234567//: explicitly push \\envir as currentEnvironment (only for clarity).\\envir.push;//: Initially, no synth is available:\\envir.synths;//: Also no synth is available in //: Play a function in envir: &#123; PinkNoise.ar(0.2) &#125; +&gt;.envir \\test;","categories":[{"name":"design","slug":"design","permalink":"http://iani.github.io/categories/design/"}],"tags":[{"name":"operators","slug":"operators","permalink":"http://iani.github.io/tags/operators/"}]},{"title":"Playing Events as Patterns","slug":"PlayingEventsAsPatterns","date":"2017-06-26T00:15:22.000Z","updated":"2017-06-26T00:15:22.000Z","comments":true,"path":"2017/06/26/PlayingEventsAsPatterns/","link":"","permalink":"http://iani.github.io/2017/06/26/PlayingEventsAsPatterns/","excerpt":"sc-hacks provides two ways to play Events as patterns: \\name pplay: (event ...) Play event as EventPattern, using default play key settings, i.e. playing notes unless something else is specified. (event ...) eplay: \\name Play event as EventPattern using a custom partial event type \\envEvent. This does not produce any sounds per default, but only writes the results of playing all streams in the event, including the default translations of \\degree, \\ctranspose and related keys, to currentEnvironment. These changes are broadcast to the system using the changed mechanism and can be used to drive both GUI and synths.","text":"sc-hacks provides two ways to play Events as patterns: \\name pplay: (event ...) Play event as EventPattern, using default play key settings, i.e. playing notes unless something else is specified. (event ...) eplay: \\name Play event as EventPattern using a custom partial event type \\envEvent. This does not produce any sounds per default, but only writes the results of playing all streams in the event, including the default translations of \\degree, \\ctranspose and related keys, to currentEnvironment. These changes are broadcast to the system using the changed mechanism and can be used to drive both GUI and synths. Both pplay and eplay use EventPattern, EventStream and EventStreamPlayer. This means, it is easy to modify the event and thus change the behaviour of the player, while it is playing. Symbol pplay Here the pattern is modified with addKey, addEvent and setEvent while playing: \\p.pplay;//:\\p.pplay ((freq: Pbrown (10, 200, 10, inf) * 10));//:\\p.pplay ((degree: Pbrown (1, 20, 3, inf)));//:\\p.addKey (\\dur, 0.1);//:\\p addEvent: (ctranspose: Pstutter (20, Pbrown (-6, 6, 1, inf)), legato: Pseq ([0.2, 0.1, 0.2, 4], inf));//:\\p setEvent: (freq: Pwhite (300, 3000, inf), dur: Pseq ([0.1, 0.3], inf), legato: 0.1); Event eplay (freq: Pwhite (400, 20000, inf).sqrt, dur: 0.1).eplay;\\window.vlayout (CSlider (\\freq)).front;//:(freq: Pwhite (400, 2000, inf), dur: 0.1).eplay;//:\\test splay: { SinOsc.ar (\\freq.kr (400), 0, 0.1) };//:(degree: Pbrown (0, 20, 2, inf), dur: 0.1).eplay;//: Play different functions in parallel, with crossfade: ~fadeTime = 2;{ var players; players = Pseq ([ { LFPulse.ar (\\freq.kr (400) / [2, 3], 0, 0.5, 0.1) }, /* { Blip.ar (\\freq.kr (400 * [1, 1.2]), LFNoise0.kr (5).range (5, 250), 0.3) }, */ { LPF.ar ( Ringz.ar (PinkNoise.ar (0.1), \\freq.kr (400) * [1, 1.5], 0.1), LFNoise2.kr (1).range (400, 1000) ) } ], inf).asStream; loop { \\test splay: players.next; 2.5.wait; }}.fork;//: NOTE: other keys are overwritten in the source event of the other","categories":[{"name":"coding","slug":"coding","permalink":"http://iani.github.io/categories/coding/"}],"tags":[{"name":"Event","slug":"Event","permalink":"http://iani.github.io/tags/Event/"},{"name":"Pattern","slug":"Pattern","permalink":"http://iani.github.io/tags/Pattern/"}]},{"title":"Mini-Language Overview","slug":"MiniLanguageOverview","date":"2017-06-25T12:55:01.000Z","updated":"2017-06-25T12:55:01.000Z","comments":true,"path":"2017/06/25/MiniLanguageOverview/","link":"","permalink":"http://iani.github.io/2017/06/25/MiniLanguageOverview/","excerpt":"The classes, methods and operators provided by sc-hacks extend SuperCollider to simplify the coding of GUI and of sound / musical structure / interaction. Inspired by the efforts of tiny=sc and tiny-inc, They are designed in the sense of a very small language. Here is a summary.","text":"The classes, methods and operators provided by sc-hacks extend SuperCollider to simplify the coding of GUI and of sound / musical structure / interaction. Inspired by the efforts of tiny=sc and tiny-inc, They are designed in the sense of a very small language. Here is a summary. Items connected to currentEnvironment: GUI, Synths, Patterns, Routines Operator and message overview This is a draft: Implementaiton of the following operators has just started The purpose of the overview is to guide coding by keeping the different versions discrete and consistent. Operators on Functions These are operators that are written after a function, and thus take a function as receiver. They serve two main uses of functions in musical processes: Play a synth (Function:play : operator +&gt;) Play a routine (Function:fork : operator *&gt;) +&gt; play as synth *&gt; play as routine (fork) Operators on Events These are operators that are written after an event, and thus take an event as receiver. They serve to play the event as EventPattern inside currentEnvironment, setting the environments keys (but not producing any sound by itself). Furthermore, they serve to modify the event of such a playing EventPattern. @&gt; play @&gt;+ addEvent @&gt;! setEvent @&gt;@ addKey Operators on Symbols These are operators that are written after a symbol, and thus take a symbol as receiver. They are primarily used to link synths (with buses, and in right synth order). &amp;&gt; set the output bus of the receiver to the input bus of the argument (only the output bus of the receiver changes) &lt; &amp; set the input bus of the argument to the output bus of the receiver (only the input bus of the argument changes) receiver &amp;&gt;! argument &amp;&gt;! set the output bus of the receiver to the input bus of the argument, on a new private bus (both receiver and argument change) receiver &amp;/&gt; argument &amp;/&gt; Copy the output signal of the receiver from its bus onto the input bus of the argument, using a signal copy synth. receiver &lt; / &gt; argument Copy the output signal of the receiver onto a new private bus, and the signal from that private bus onto the input bus of the argument, using 2 signal copy synths. Messages to symbols splay eplay rplay Operators on strings (!?) string +&gt; symbol : play synthdef named by string on the symbol as SynthPlayer ? Playing Synths Playing Routines Playing patterns with default note events Playing patterns in currentEnvironment Creating GUIs","categories":[{"name":"coding","slug":"coding","permalink":"http://iani.github.io/categories/coding/"}],"tags":[{"name":"method","slug":"method","permalink":"http://iani.github.io/tags/method/"},{"name":"class","slug":"class","permalink":"http://iani.github.io/tags/class/"},{"name":"coding","slug":"coding","permalink":"http://iani.github.io/tags/coding/"},{"name":"language","slug":"language","permalink":"http://iani.github.io/tags/language/"}]},{"title":"Registry: Hierarchical Namespaces","slug":"Registry","date":"2017-06-22T16:08:26.000Z","updated":"2017-06-22T16:08:26.000Z","comments":true,"path":"2017/06/23/Registry/","link":"","permalink":"http://iani.github.io/2017/06/23/Registry/","excerpt":"This class helps to store objects and to retrieve them using a key. This is similar to the way that with classes such as Pdef, Ndef, OSCdef work, but Registry can be used to add the same feature to any class, without subclassing it. To create this behavior instead, add a method to Symbol for accessing the kind of object needed. For example: \\aSymbol.oscFunc. This also allows easier customization of how the object is created if not found.","text":"This class helps to store objects and to retrieve them using a key. This is similar to the way that with classes such as Pdef, Ndef, OSCdef work, but Registry can be used to add the same feature to any class, without subclassing it. To create this behavior instead, add a method to Symbol for accessing the kind of object needed. For example: \\aSymbol.oscFunc. This also allows easier customization of how the object is created if not found. How it works Store an object in Library under an array of objects (called a path). When accessing the path, create the object if not already stored, else return the previously stored object. Who uses it SynthPlayer registers its instances in the current environment under their names. Function:oscFunc and Symbol:removeOsc registers OSCFuncs under their path names in order to remove existing OSCFunc instances when creating a new one under the same path. Example This is the code that makes it possible to create or modify an OSCFunc bound to a symbol. It defines the methods Function:oscFunc and Symbol:removeOsc. + Function {&#10;&#9;oscFunc { | path |&#10;&#9;&#9;path.removeOsc;&#10;&#9;&#9;^Registry (&#39;oscFuncs&#39;, path, { OSCFunc (this, path) });&#10;&#9;}&#10;}&#10;&#10;+ Symbol {&#10;&#9;removeOsc {&#10;&#9;&#9;Registry.doIfFound (&#39;oscFuncs&#39;, this, { | found |&#10;&#9;&#9;&#9;found.objectClosed;&#10;&#9;&#9;&#9;found.free;&#10;&#9;&#9;}); &#10;&#9;}&#10;}","categories":[{"name":"classes","slug":"classes","permalink":"http://iani.github.io/categories/classes/"}],"tags":[{"name":"registry","slug":"registry","permalink":"http://iani.github.io/tags/registry/"}]},{"title":"Creating GUIs","slug":"CreatingGUIs","date":"2017-06-22T04:28:36.000Z","updated":"2017-06-22T04:28:36.000Z","comments":true,"path":"2017/06/22/CreatingGUIs/","link":"","permalink":"http://iani.github.io/2017/06/22/CreatingGUIs/","excerpt":"This library provides utilities for creating GUI elements and connecting them to both patterns and synths. Here are some examples.","text":"This library provides utilities for creating GUI elements and connecting them to both patterns and synths. Here are some examples. Windows Sliders Buttons","categories":[{"name":"design","slug":"design","permalink":"http://iani.github.io/categories/design/"}],"tags":[{"name":"gui","slug":"gui","permalink":"http://iani.github.io/tags/gui/"},{"name":"window","slug":"window","permalink":"http://iani.github.io/tags/window/"}]},{"title":"Triggering EnvGen and Line","slug":"TriggeringEnvGen","date":"2017-06-21T18:11:53.000Z","updated":"2017-06-22T04:22:28.000Z","comments":true,"path":"2017/06/22/TriggeringEnvGen/","link":"","permalink":"http://iani.github.io/2017/06/22/TriggeringEnvGen/","excerpt":"Besides controlling the amplitude shape of a single sound-event or note in its entirety, envelopes can also be used to generate streams of sound events with the same synth. The same technique can also be applied to Line or Xline to arbitrarily construct shapes controlling any parameter on the fly. Here are some examples explaining how to do this using either just the default SCClassLibrary and the sc-hacks library.","text":"Besides controlling the amplitude shape of a single sound-event or note in its entirety, envelopes can also be used to generate streams of sound events with the same synth. The same technique can also be applied to Line or Xline to arbitrarily construct shapes controlling any parameter on the fly. Here are some examples explaining how to do this using either just the default SCClassLibrary and the sc-hacks library. Basic Examples Two items are necessary to re-trigger envelope or line-segment UGens in a Synth: The doneAction argument of the UGen in question must have a value of 0 in order to keep the Synth alive afer the UGen has finished playing. The UGen in question must use a control in its gate argument. The UGen restarts whenever the value of the gate control changes from 0 to 1. Furthermore, if the Envelope contains a release part, then the release part will be triggered when the gate control changes from 1 to 0. Caution: Use a name other than gate as control name for triggering *NOTE: The control used to trigger the EnvGen must have a name different than gate, otherwise SC will be unable to release the synth because it creates a second gate control by default when creating synthdefs from functions. For example: //: This is wrong:&#10;a = { | freq = 400, gate = 0 |&#10;&#9;var env;&#10;&#9;env = Env.adsr ();&#10;&#9;SinOsc.ar (freq, 0, 0.1)&#10;&#9;* EnvGen.kr (env, gate: gate, doneAction: 0)&#10;}.play;&#10;NodeWatcher.register (a); // register a to update state when it ends&#10;//: Test if a is playing&#10;a.isPlaying;&#10;// first let it make a sound:&#10;a.set (\\gate, 1);&#10;//: then try to release it:&#10;a.release;&#10;//: The output amplitude is 0 but the synth is still playing:&#10;a.isPlaying;&#10;//: Try again, specifying a release time:&#10;a.release (0.1);&#10;//: To really stop the synth, you have to free it&#10;a.free;&#10;//: The synth has stopped playing. Synth count should be 0 in the server display&#10;a.isPlaying; // returns false Function play and Synth set (SCClassLibrary) Here is a simple example using only the standard SCClassLibrary: //: Start a triggerable synth and store it in variable a&#10;// Note: The EnvGen will not be triggered because trig is 0.&#10;// Thus the synth will not produce an audible signal.&#10;&#10;// use trig instead of gate as control name!&#10;a = { | freq = 400, trig = 0 |&#10;&#9;var env;&#10;&#9;env = Env.adsr ();&#10;&#9;SinOsc.ar (freq, 0, 0.1)&#10;&#9;* EnvGen.kr (env, gate: trig, doneAction: 0)&#10;}.play;&#10;//: Trigger the envelope&#10;a.set (\\trig, 1);&#10;//: Release the envelope&#10;a.set (\\trig, 0);&#10;//: Re-trigger the nevelope&#10;a.set (\\trig, 1);&#10;//: Release the envelope again&#10;a.set (\\trig, 0);&#10;//: Run a routine to start and stop the synth several times&#10;{&#10;&#9;10 do: { | i |&#10;&#9;&#9;a.set (\\trig, (i + 1) % 2); // i+1 : start with trigger on&#10;&#9;&#9;0.01.exprand (0.5).wait;&#10;&#9;}&#10;}.fork;&#10;//: Do the same as above, but also change the frequency&#10;{&#10;&#9;40 do: { | i |&#10;&#9;&#9;// only change frequency when starting, not when releasing:&#10;&#9;&#9;if (i + 1 % 2 &#38;gt; 0) { // i / 2: wholetone -&#38;gt; chromatic&#10;&#9;&#9;&#9;a.set (\\freq, (i / 2 + 60).midicps, \\trig, 1); &#10;&#9;&#9;}{&#10;&#9;&#9;&#9;a.set (\\trig, 0);&#10;&#9;&#9;};&#10;&#9;&#9;0.01.exprand (0.5).wait;&#10;&#9;};&#10;}.fork;&#10;//: Control through environment variables, using Function +&gt; In sc-hacks, the operator +&gt; plays a function and stores its synth in the global Library using a SynthPlayer instance. Additionally, it makes the synth react whenever an environment variable whose name corresponds to a control parameter of the synth is set in the currentEnvironment. This makes it easy to control the synth through the environment. Example: { | freq = 400, trig = 0 |&#10;&#9;var env;&#10;&#9;env = Env.adsr ();&#10;&#9;SinOsc.ar (freq, 0, 0.1)&#10;&#9;* EnvGen.kr (env, gate: trig, doneAction: 0)&#10;} +&#38;gt; \\test;&#10;//:&#10;~trig = 1;&#10;//:&#10;~trig = 0;&#10;//:&#10;{&#10;&#9;var trig;&#10;&#9;inf do: { | i |&#10;&#9;&#9;trig = i + 1 % 2;&#10;&#9;&#9;if (trig &#38;gt; 0) { ~freq = 300 rrand: 3000 };&#10;&#9;&#9;~trig = trig;&#10;&#9;&#9;0.9.rand.wait;&#10;&#9;};&#10;}.rout;&#10;// rout starts a routine like fork, and stores it in the library&#10;// under a name (default: &#39;routine&#39;)&#10;// Additionally, if a routine is running under the same name,&#10;// it stops that routine before starting the new one to replace it.&#10;//:&#10;{&#10;&#9;var trig;&#10;&#9;26 do: { | i |&#10;&#9;&#9;trig = i + 1 % 2;&#10;&#9;&#9;if (trig &#38;gt; 0) { ~freq = (i / 2 + 60).midicps };&#10;&#9;&#9;~trig = trig;&#10;&#9;&#9;0.24.wait;&#10;&#9;};&#10;}.rout;&#10;//:&#10;{&#10;&#9;20 do: { | i |&#10;&#9;&#9;~trig = i + 1 % 2;&#10;&#9;&#9;~freq = 300 rrand: 3000;&#10;&#9;&#9;0.9.rand.wait;&#10;&#9;}&#10;}.rout;","categories":[{"name":"design","slug":"design","permalink":"http://iani.github.io/categories/design/"}],"tags":[{"name":"trigger","slug":"trigger","permalink":"http://iani.github.io/tags/trigger/"},{"name":"design","slug":"design","permalink":"http://iani.github.io/tags/design/"},{"name":"gate","slug":"gate","permalink":"http://iani.github.io/tags/gate/"},{"name":"envgen","slug":"envgen","permalink":"http://iani.github.io/tags/envgen/"},{"name":"env","slug":"env","permalink":"http://iani.github.io/tags/env/"}]},{"title":"Pattern and Synth play scenarios","slug":"PatternSynthPlay","date":"2017-06-21T11:22:08.000Z","updated":"2017-06-21T11:34:27.000Z","comments":true,"path":"2017/06/21/PatternSynthPlay/","link":"","permalink":"http://iani.github.io/2017/06/21/PatternSynthPlay/","excerpt":"Event:eplay and SynthPlayer can play with several instances in parallel on the same environment, and also provide several additional features. This section gives some examples that explore these features and show how they work and notes some questions regarding future features.","text":"Event:eplay and SynthPlayer can play with several instances in parallel on the same environment, and also provide several additional features. This section gives some examples that explore these features and show how they work and notes some questions regarding future features. Creating, starting and stopping patterns Playing several patterns in the same environment Playing several synths in the same environment","categories":[{"name":"use","slug":"use","permalink":"http://iani.github.io/categories/use/"}],"tags":[{"name":"synth","slug":"synth","permalink":"http://iani.github.io/tags/synth/"},{"name":"design","slug":"design","permalink":"http://iani.github.io/tags/design/"},{"name":"use","slug":"use","permalink":"http://iani.github.io/tags/use/"},{"name":"pattern","slug":"pattern","permalink":"http://iani.github.io/tags/pattern/"}]},{"title":"Triggering Methods","slug":"TriggeringMethods","date":"2017-06-21T04:19:28.000Z","updated":"2017-06-21T04:22:41.000Z","comments":true,"path":"2017/06/21/TriggeringMethods/","link":"","permalink":"http://iani.github.io/2017/06/21/TriggeringMethods/","excerpt":"This section illustrates several different ways to trigger grains, envelopes or other gate-triggered UGens","text":"This section illustrates several different ways to trigger grains, envelopes or other gate-triggered UGens Triggering from lang with set Triggering internally UGens Impulse, Dust etc. Demand UGens","categories":[{"name":"coding","slug":"coding","permalink":"http://iani.github.io/categories/coding/"}],"tags":[{"name":"trigger","slug":"trigger","permalink":"http://iani.github.io/tags/trigger/"},{"name":"gate","slug":"gate","permalink":"http://iani.github.io/tags/gate/"},{"name":"techniques","slug":"techniques","permalink":"http://iani.github.io/tags/techniques/"},{"name":"grains","slug":"grains","permalink":"http://iani.github.io/tags/grains/"},{"name":"envelopes","slug":"envelopes","permalink":"http://iani.github.io/tags/envelopes/"}]},{"title":"Playing With Data","slug":"PlayingWithData","date":"2017-06-20T16:00:07.000Z","updated":"2017-06-21T04:18:14.000Z","comments":true,"path":"2017/06/21/PlayingWithData/","link":"","permalink":"http://iani.github.io/2017/06/21/PlayingWithData/","excerpt":"This section discusses problems and approaches for sonifying data using EventPlayer and SynthPlayer.","text":"This section discusses problems and approaches for sonifying data using EventPlayer and SynthPlayer. Data dimensions and play method The data is a 2 dimensional array. It is played as a Pseq along the first dimension. This results in a stream of rows. Each subsequent element returned by the stream is a row of data. Different ways of playing rows Playing each data row as one Synth Playing each d","categories":[{"name":"design","slug":"design","permalink":"http://iani.github.io/categories/design/"}],"tags":[{"name":"design","slug":"design","permalink":"http://iani.github.io/tags/design/"},{"name":"data","slug":"data","permalink":"http://iani.github.io/tags/data/"}]},{"title":"Playing Grains","slug":"PlayingGrains","date":"2017-06-20T15:53:36.000Z","updated":"2017-06-20T15:54:00.000Z","comments":true,"path":"2017/06/21/PlayingGrains/","link":"","permalink":"http://iani.github.io/2017/06/21/PlayingGrains/","excerpt":"Here are some examples for playing grains of sound from a buffer with","text":"Here are some examples for playing grains of sound from a buffer with To be provided &#x2026;","categories":[{"name":"use","slug":"use","permalink":"http://iani.github.io/categories/use/"}],"tags":[{"name":"granular synthesis","slug":"granular-synthesis","permalink":"http://iani.github.io/tags/granular-synthesis/"}]},{"title":"Improving Function:eplay","slug":"ImprovingEplay","date":"2017-06-19T01:52:42.000Z","updated":"2017-06-19T02:42:37.000Z","comments":true,"path":"2017/06/19/ImprovingEplay/","link":"","permalink":"http://iani.github.io/2017/06/19/ImprovingEplay/","excerpt":"Individual improvement steps for Function:eplay: Done and TODO. Thesse notes are from an early stage in development. Now the functionality of most done steps has been integrated in class SynthPlayer.","text":"Individual improvement steps for Function:eplay: Done and TODO. Thesse notes are from an early stage in development. Now the functionality of most done steps has been integrated in class SynthPlayer. Done (11 Jun 2017 21:48) Store the resulting synth in envir under [\\synths, synthName] (default for synthName: synth). If previous synth exists under [\\synths, synthName] path, then free/release it. When a synth ends, remove it from its path in envir. Make sure that when a synth previousSynth is released by replacing it through a new synth created through Function:eplay, the previousSynth ending does not remove the new synth that has already been stored in the same path. Notification actions for updates from enviroment variable changes are added when the Synth starts (not when the Function:play message is sent). This way, there are no more errors \"Node not found\" when changing the environment before the synth has started. Done (19 Jun 2017 10:52): Synth start-stop (release) and set control from Event:eplay (EventPatterns) The following will add some complexity to the current scheme and may therefore be added later on only. Define SynthPlayer to add synth start-stop capabilities to Function:eplay Add synths instance variable to Nevent for faster access to SynthPlayers In addition to listening for changes from the currentEnvironment, a second notification mechanism should be added to Function:eplay, to enable creating new synths, releasing or freeing this synth when playing EventPatterns with an EventStreamPlayer. A simple way to do this is by a stream which generates the commands to be played. The stream is stored in a key with the same name as the synth to be controlled. Function:eplay or SynthPlayer:play adds the environment as notifier to the synth with the synth's name as message and a switch statement which choses the action to be performed depending on the value that was sent in addition to the key (message) by the changed message. A draft for this code has been added now to Function:eplay: synth.onStart (this, {| myself |&#10;&#9;// &#34;Synth started, so I add notifiers for updates&#34;.postln;&#10;&#9;argNames do: { | param |&#10;&#9;&#9;synth.addNotifier (envir, param, { | val |&#10;&#9;&#9;&#9;synth.set (param, val);&#10;&#9;&#9;});&#10;&#9;&#9;// Experimental: &#10;&#9;&#9;synth.addNotifier (envir, name, { | command |&#10;&#9;&#9;&#9;// command.postln;&#10;&#9;&#9;&#9;switch (command,&#10;&#9;&#9;&#9;&#9;\\stop, {&#10;&#9;&#9;&#9;&#9;&#9;synth.objectClosed;&#10;&#9;&#9;&#9;&#9;&#9;synth.release (envir [\\releaseTime] ? 0.02);&#10;&#9;&#9;&#9;&#9;},&#10;&#9;&#9;&#9;&#9;{ postf (&#34;the command was: %\\n&#34;, command)}&#10;&#9;&#9;&#9;)&#10;&#9;&#9;})&#10;&#9;};&#10;}); Still TODO (19 Jun 2017 10:52) Synth start-stop notifications for GUI and other listeners When a new synth starts or when an old synth is removed, it should emit notifications so that GUIS that depend on it update their status. Such guis may be: Start-stop buttons Guis with widgets for controlling the synths parameters. When a new synth starts, then the old gui should be replaced with a new one with widgets corresponding to the new synth's control parameters. Note: Possibly the notification should be emitted from the \\synthName under which the synth is stored. The messages may be: \\started \\stopped \\replaced The above is subject to testing. Notes When this is done, it should be possible to create multiple gui windows for multiple synths running in the same environment. However, parameters under the same name will control the parameters under that name for all synths in that environment. To develop the right code for this, do it with a plain function, adding the functionalities one-by-one. Current Function:eplay method code + Function {&#10;&#9;eplay { | name = \\synth, envir |&#10;&#9;&#9;var synth;&#10;&#9;&#9;envir = envir.asEnvironment;&#10;&#9;&#9;Registry.doIfFound (envir, \\synths, name, { | oldSynth |&#10;&#9;&#9;&#9;oldSynth.objectClosed; // prevent removal of successor on end&#10;&#9;&#9;&#9;oldSynth.release(envir [\\releaseTime] ? 0.02);&#10;&#9;&#9;});&#10;&#9;&#9;envir use: {&#10;&#9;&#9;&#9;var argNames, args;&#10;&#9;&#9;&#9;argNames = this.def.argNames;&#10;&#9;&#9;&#9;/* assume that the func uses a gate argument&#10;&#9;&#9;&#9;&#9;Later devise a way to get all the actual controls from the synthdef after it has loaded&#10;&#9;&#9;&#9;*/&#10;&#9;&#9;&#9;args = (argNames ++ [&#39;gate&#39;]).collect ({ | name |&#10;&#9;&#9;&#9;&#9;[name, envir[name]]&#10;&#9;&#9;&#9;}).select ({ | pair |&#10;&#9;&#9;&#9;&#9;pair [1].notNil;&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;// arg target, outbus = 0, fadeTime = 0.02, addAction=\\addToHead, args;&#10;&#9;&#9;&#9;// Ensure removal from lib on end:&#10;&#9;&#9;&#9;synth = Registry (envir, \\synths, name, {&#10;&#9;&#9;&#9;&#9;this.play (&#10;&#9;&#9;&#9;&#9;&#9;~target.asTarget, ~outbus ? 0, ~fadeTime ? 0.02,&#10;&#9;&#9;&#9;&#9;&#9;~addAction ? \\addToHead, (args ? []).flat&#10;&#9;&#9;&#9;&#9;)&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;synth.onStart (this, {| myself |&#10;&#9;&#9;&#9;&#9;// &#34;now adding the notifiers for updates, just on time&#34;.postln;&#10;&#9;&#9;&#9;&#9;argNames do: { | param |&#10;&#9;&#9;&#9;&#9;&#9;synth.addNotifier (envir, param, { | val |&#10;&#9;&#9;&#9;&#9;&#9;&#9;synth.set (param, val);&#10;&#9;&#9;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;&#9;};&#10;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;if (argNames.size == 0) {&#10;&#9;&#9;&#9;&#9;synth.onEnd (this, { synth.objectClosed;}); // in case no func args&#10;&#9;&#9;&#9;}&#10;&#9;&#9;};&#10;&#9;&#9;^synth;&#10;&#9;}&#10;} Drafts for next version See https://github.com/iani/sc-hacks/blob/master/LabCode/rebuildFunctionEplay.scd for draft to get started on this TODO.","categories":[{"name":"methods","slug":"methods","permalink":"http://iani.github.io/categories/methods/"},{"name":"notes","slug":"methods/notes","permalink":"http://iani.github.io/categories/methods/notes/"}],"tags":[{"name":"synth","slug":"synth","permalink":"http://iani.github.io/tags/synth/"},{"name":"design","slug":"design","permalink":"http://iani.github.io/tags/design/"},{"name":"TODO","slug":"TODO","permalink":"http://iani.github.io/tags/TODO/"}]},{"title":"Event eplay: Patterns updating current environment","slug":"EventEplay","date":"2017-06-13T15:27:31.000Z","updated":"2017-06-13T15:27:31.000Z","comments":true,"path":"2017/06/14/EventEplay/","link":"","permalink":"http://iani.github.io/2017/06/14/EventEplay/","excerpt":"anEnvironment.eplay(envir) Play an event as EventPattern, updating the values in envir from each event. Use custom event type: envEvent. This only updates the values in the environment. The sound must be generated by Function:eplay. See examples below.","text":"anEnvironment.eplay(envir) Play an event as EventPattern, updating the values in envir from each event. Use custom event type: envEvent. This only updates the values in the environment. The sound must be generated by Function:eplay. See examples below. Play the receiver Event in the environment given in argument envir using a custom event type to just set the values of corresponding variables at each event. For example, playing () set ~freq to 60.midicps every 1 second. (dur: 0.1).eplay; ().eplay; () eplay: \\newEnvir; Examples Example 1: Single synth, pattern, gui update (degree: Pbrown (0, 30, 2, inf), dur: 0.1).eplay;&#10;{ | freq = 400 | SinOsc.ar (freq, 0, 0.1 )}.eplay;&#10;\\window.vlayout (CSlider (\\freq)).front; Example 2: Envelope gate on-off To test triggering of envelopes, instead of writing this: { | freq = 400, gate = 0 |&#10;&#9;var env;&#10;&#9;env = Env.adsr ();&#10;&#9;SinOsc.ar (freq, 0, 0.1)&#10;&#9;* EnvGen.kr (env, gate: gate, doneAction: 0)&#10;}.eplay;&#10;//:&#10;{&#10;&#9;inf do: { | i |&#10;&#9;&#9;~gate = i % 2;&#10;&#9;0.1.rrand (0.5).wait&#10;&#9;}&#10;}.rout; one may write this: { | freq = 400, gate = 0 |&#10;&#9;var env;&#10;&#9;env = Env.adsr (0.01, 0.01, 0.9, 0.3);&#10;&#9;SinOsc.ar (freq, 0, 0.1)&#10;&#9;* EnvGen.kr (env, gate: gate, doneAction: 0)&#10;}.eplay;&#10;&#10;(dur: Pwhite (0.01, 0.15, inf), gate: Pseq([0, 1], inf)).eplay;&#10;//: Note the overlap with the still playing note in the freq change:&#10;(dur: 0.15, gate: Pseq([0, 1], inf), degree: Pstutter (4, Pbrown (-5, 20, 5, inf))).eplay; Example 3: Many patterns + many synths in same environment { | freq = 400 | SinOsc.ar (freq * [1, 1.25], 0, 0.1) }.eplay;&#10;(dur: 0.1, degree: Pbrown (-1, 20, 2, inf)).eplay;&#10;//: Start the next synth later:&#10;{ | freq = 400 |&#10;&#9;Ringz.ar (PinkNoise.ar, freq * 1.2)&#10;}.eplay (\\synth2);&#10;//: Test fade out when releasing synth to replace with new one:&#10;~fadeTime = 5;&#10;//:&#10;{ | freq = 400, ringTime = 3 |&#10;&#9;Ringz.ar (PinkNoise.ar, freq * [2, 1.2], ringTime)&#10;}.eplay (\\synth2);&#10;//:&#10;~ringTime = 0.03;&#10;//:&#10;~ringTime = 2;&#10;//: Start a new pattern in place of the old one:&#10;(dur: 0.1, degree: Pbrown (-1, 20, 2, inf), ringTime: Pwhite (0.01, 1.2, inf)).eplay;&#10;//: remove the ringTime from the next version of the pattern:&#10;(dur: 0.1, degree: Pbrown (-1, 20, 2, inf)).eplay;&#10;//: add a new pattern on the same environment, playing ringTime:&#10;(dur: 0.01, ringTime: Pbrown (0.001, 3, 0.1, inf)).eplay (\\ringTime);``&#10;//: add a new pattern on the same environment, playing ringTime:&#10;(dur: 0.1, ringTime: Pwhite (0.01, 4, inf)).eplay (\\ringTime);&#10;//:","categories":[{"name":"methods","slug":"methods","permalink":"http://iani.github.io/categories/methods/"}],"tags":[{"name":"EventPattern","slug":"EventPattern","permalink":"http://iani.github.io/tags/EventPattern/"},{"name":"notification","slug":"notification","permalink":"http://iani.github.io/tags/notification/"},{"name":"EnvGen","slug":"EnvGen","permalink":"http://iani.github.io/tags/EnvGen/"},{"name":"trigger","slug":"trigger","permalink":"http://iani.github.io/tags/trigger/"},{"name":"Event","slug":"Event","permalink":"http://iani.github.io/tags/Event/"}]},{"title":"Nevent: Environment that notifes variable updates","slug":"Nevent","date":"2017-06-11T09:17:57.000Z","updated":"2017-06-11T09:17:57.000Z","comments":true,"path":"2017/06/11/Nevent/","link":"","permalink":"http://iani.github.io/2017/06/11/Nevent/","excerpt":"","text":"Nevent is an EnvironmentRedirect that notifies the changes of value of its variables.","categories":[{"name":"classes","slug":"classes","permalink":"http://iani.github.io/categories/classes/"}],"tags":[{"name":"notification","slug":"notification","permalink":"http://iani.github.io/tags/notification/"}]},{"title":"Store Specs and SynthDefs in Library","slug":"StoreSpecsAndSynthDefsInLibrary","date":"2017-06-09T09:06:09.000Z","updated":"2017-06-09T09:10:00.000Z","comments":true,"path":"2017/06/09/StoreSpecsAndSynthDefsInLibrary/","link":"","permalink":"http://iani.github.io/2017/06/09/StoreSpecsAndSynthDefsInLibrary/","excerpt":"","text":"Specs and SynthDefs should be stored in Library using Registry. Advantages: simplify and unify the API for accessing Specs and SynthDefs (and SynthDescs). provide global access to Specs and SynthDefs for all environments, guis, synths using spec/synthdef name. ensure SynthDefs are always loaded when the server is rebooted, also when it is a remote server. provide easy global access to SynthDescs for automatic GUI generation.","categories":[{"name":"notes","slug":"notes","permalink":"http://iani.github.io/categories/notes/"}],"tags":[{"name":"design","slug":"design","permalink":"http://iani.github.io/tags/design/"},{"name":"TODO","slug":"TODO","permalink":"http://iani.github.io/tags/TODO/"}]},{"title":"Function:eplay : play a function and follow its arguments from an environment","slug":"Function-eplay","date":"2017-06-08T15:46:28.000Z","updated":"2017-06-08T15:59:12.000Z","comments":true,"path":"2017/06/09/Function-eplay/","link":"","permalink":"http://iani.github.io/2017/06/09/Function-eplay/","excerpt":"Provide arguments for playing a function from values found in an environment. connect all control names in the function's arguments to an environment for auto-update Free all notifications from the synth when it stops playing.","text":"Provide arguments for playing a function from values found in an environment. connect all control names in the function's arguments to an environment for auto-update Free all notifications from the synth when it stops playing. Method code + Function {&#10;&#9;eplay { | envir = \\envir |&#10;&#9;&#9;var synth;&#10;&#9;&#9;envir = envir.asEnvironment;&#10;&#9;&#9;envir use: {&#10;&#9;&#9;&#9;var argNames, args;&#10;&#9;&#9;&#9;argNames = this.def.argNames;&#10;&#9;&#9;&#9;args = argNames.collect ({ | name |&#10;&#9;&#9;&#9;&#9;[name, currentEnvironment [name]]&#10;&#9;&#9;&#9;}).select ({ | pair |&#10;&#9;&#9;&#9;&#9;pair [1].notNil;&#10;&#9;&#9;&#9;}).flat;&#10;&#9;&#9;&#9;// arg target, outbus = 0, fadeTime = 0.02, addAction=\\addToHead, args;&#10;&#9;&#9;&#9;synth = this.play (&#10;&#9;&#9;&#9;&#9;~target.asTarget, ~outbus ? 0, ~fadeTime ? 0.02,&#10;&#9;&#9;&#9;&#9;~addAction ? \\addToHead, args&#10;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;argNames do: { | param |&#10;&#9;&#9;&#9;&#9;synth.addNotifier (envir, param, { | val |&#10;&#9;&#9;&#9;&#9;&#9;synth.set (param, val);&#10;&#9;&#9;&#9;&#9;});&#10;&#9;&#9;&#9;};&#10;&#9;&#9;};&#10;&#9;&#9;// This is done by addNotifier anyway:&#10;&#9;&#9;// synth.onEnd (this, { synth.objectClosed });&#10;&#9;&#9;^synth;&#10;&#9;}&#10;} Example \\window.vlayout (&#10;&#9;HLayout (&#10;&#9;&#9;StaticText ().string_ (\\freq),&#10;&#9;&#9;Slider.horizontal.connectEnvir (\\freq),&#10;&#9;&#9;NumberBox ().connectEnvir (\\freq)&#10;&#9;)&#10;).front;&#10;//:&#10;{&#10;&#9;loop {&#10;&#9;&#9;~freq = 400 + 400.rand;&#10;&#9; 1.wait;&#10;&#9;}&#10;}.fork;&#10;//:&#10;{ | freq = 440 | SinOsc.ar (freq, 0, 0.1) }.eplay;&#10;//:","categories":[{"name":"methods","slug":"methods","permalink":"http://iani.github.io/categories/methods/"}],"tags":[{"name":"synth","slug":"synth","permalink":"http://iani.github.io/tags/synth/"},{"name":"method","slug":"method","permalink":"http://iani.github.io/tags/method/"},{"name":"environment","slug":"environment","permalink":"http://iani.github.io/tags/environment/"}]},{"title":"Building GUIs","slug":"BuildingGUIs","date":"2017-06-06T11:18:21.000Z","updated":"2017-06-06T14:24:35.000Z","comments":true,"path":"2017/06/06/BuildingGUIs/","link":"","permalink":"http://iani.github.io/2017/06/06/BuildingGUIs/","excerpt":"This notebook shows how to build GUIs starting from scratch, with minimal code and in small steps.","text":"This notebook shows how to build GUIs starting from scratch, with minimal code and in small steps. Just a window //: 1 Just a window&#10;Window (&#34;window name&#34;).front; Add a slider and resize. Use VLayout for automatic resizing. Window (&#34;window name&#34;)&#10;.view.layout_ (&#10;&#9;VLayout (&#10;&#9;&#9;Slider ()&#10;&#9;)&#10;).front;&#10;//: Make the slider horizontal.&#10;Window (&#34;window name&#34;)&#10;.view.layout_ (&#10;&#9;VLayout (&#10;&#9;&#9;Slider ()&#10;&#9;&#9;.orientation_ (\\horizontal)&#10;&#9;)&#10;).front; Add more sliders Use a function to avoid repeating spec code! Make the orientation an argument to enable customization. var makeSlider;&#10;&#10;makeSlider = { | orientation = \\horizontal |&#10;&#9;Slider ()&#10;&#9;&#9;.orientation_ (orientation)&#10;};&#10;&#10;Window (&#34;window name&#34;)&#10;.view.layout_ (&#10;&#9;VLayout (&#10;&#9;&#9;*({makeSlider.([\\horizontal, \\vertical].choose)} ! 10)&#10;&#9;)&#10;).front; Add more arguments for controlSpec, label, and action var makeSlider;&#10;&#10;makeSlider = { | label = &#34;slider&#34;, min = 0, max = 10, step = 0, default = 0.5, orientation = \\horizontal,&#10;&#9;action |&#10;&#9;var controlSpec;&#10;&#9;controlSpec = [min, max, \\lin, step, default].asSpec;&#10;&#9;// provide default action if needed:&#10;&#9;action ?? {&#10;&#9;&#9;action = { | value | controlSpec.map (value).postln }&#10;&#9;};&#10;&#9;HLayout (&#10;&#9;&#9;StaticText ().string_ (label),&#10;&#9;&#9;Slider ()&#10;&#9;&#9;.action_ ({ | me | action.(me.value)})&#10;&#9;&#9;.orientation_ (orientation)&#10;&#9;)&#10;};&#10;&#10;Window (&#34;window name&#34;)&#10;.view.layout_ (&#10;&#9;VLayout (&#10;&#9;&#9;*({makeSlider.([\\horizontal, \\vertical].choose)} ! 10)&#10;&#9;)&#10;).front; Add number box, after the slider. var makeSlider;&#10;&#10;makeSlider = { | label = &#34;slider&#34;, min = 0, max = 10, step = 0, default = 0.5, orientation = \\horizontal,&#10;&#9;action |&#10;&#9;var controlSpec;&#10;&#9;controlSpec = [min, max, \\lin, step, default].asSpec;&#10;&#9;// provide default action if needed:&#10;&#9;action ?? {&#10;&#9;&#9;action = { | value | controlSpec.map (value).postln }&#10;&#9;};&#10;&#9;HLayout (&#10;&#9;&#9;StaticText ().string_ (label),&#10;&#9;&#9;Slider ()&#10;&#9;&#9;.action_ ({ | me | action.(me.value)})&#10;&#9;&#9;.orientation_ (orientation),&#10;&#9;&#9;NumberBox ())&#10;};&#10;&#10;Window (&#34;window name&#34;)&#10;.view.layout_ (&#10;&#9;VLayout (&#10;&#9;&#9;*({makeSlider.(&#10;&#9;&#9;&#9;max: 0.0.rrand (20.0),&#10;&#9;&#9;&#9;orientation: [\\horizontal, \\vertical].choose)} ! 10)&#10;&#9;)&#10;).front; Add value update for number box and slider var makeSlider; makeSlider = { | label = \"slider\", min = 0, max = 10, step = 0, default = 0.5, orientation = \\horizontal, action | var controlSpec, mappedVal, slider, numberBox; controlSpec = [min, max, \\lin, step, default].asSpec; // provide default action if needed: action ?? { action = { | value | value.postln } }; HLayout ( StaticText ().string_ (label), slider = Slider () .action_ ({ | me | mappedVal = controlSpec.map (me.value); numberBox.value = mappedVal; action.(mappedVal)}) .orientation_ (orientation), numberBox = NumberBox () .action_ ({ | me | mappedVal = me.value; slider.value = controlSpec.unmap (mappedVal); action.(mappedVal) }) ) }; Window (\"window name\") .view.layout_ ( VLayout ( *({ | i | makeSlider.(format (\"slider %\", i), max: 0.0.rrand (20.0), orientation: [\\horizontal, \\vertical].choose) } ! 10) ) ).front; Group the controlSpec arguments to make them more compact Also initialize the values of gui elements #+BEGIN_SRC sclang var makeSlider; makeSlider = { | label = \"slider\", controlSpec, orientation = \\horizontal, action | var mappedVal, slider, numberBox; // convert controlSpec arg into ControlSpec controlSpec = (controlSpec ? []).asSpec; // provide default action if needed: action ?? { action = { | value | value.postln } }; HLayout ( StaticText ().string_ (label), slider = Slider () .action_ ({ | me | mappedVal = controlSpec.map (me.value); numberBox.value = mappedVal; action.(mappedVal)}) .orientation_ (orientation) .value_ (controlSpec unmap: controlSpec.default), numberBox = NumberBox () .action_ ({ | me | mappedVal = me.value; slider.value = controlSpec.unmap (mappedVal); action.(mappedVal) }) .value_ (controlSpec.default) ) }; Window (\"window name\") .view.layout_ ( VLayout ( *([\\freq, &amp;] collect: { | name | makeSlider.(format (\" %\", name), controlSpec: name, orientation: \\horizontal * [\\horizontal, \\vertical].choose * ) }) ) ).front; How to add all available options for Slider and NumberBox, eg. floating point digits etc? Instead of adding more arguments, move to the next step: Define a class and provide the options as defaults. Next steps &#x2026; Control a routine from a GUI. Let the GUI elements set environment variables of an environment. Let the routine run within this environment to have access to its variables. Save the current settings on file. Reload settings from file. Do similar things as with 1, but with a synth instead of a routine. Do similar things as with 1, but with an EventPattern instead of a routine.","categories":[{"name":"gui","slug":"gui","permalink":"http://iani.github.io/categories/gui/"}],"tags":[{"name":"learning","slug":"learning","permalink":"http://iani.github.io/tags/learning/"},{"name":"gui","slug":"gui","permalink":"http://iani.github.io/tags/gui/"}]},{"title":"EventStream: Modify Patterns while playing","slug":"EventStream","date":"2017-06-05T15:42:37.000Z","updated":"2017-06-06T08:20:38.000Z","comments":true,"path":"2017/06/06/EventStream/","link":"","permalink":"http://iani.github.io/2017/06/06/EventStream/","excerpt":"An EventStream makes it easy to modify patterns while playing them.","text":"An EventStream makes it easy to modify patterns while playing them. How it works An EventPattern creates EventStreams which are played by EventStreamPlayer. EventStream stores an event whose values are streams and uses this to produce a new event which is played by EventStreamPlayer. It is thus possible to modify the event stored in the EventStream while the EventStreamPlayer is playing it. This makes it easy to modify a playing pattern (which is difficult when using Pbind). Example () +&gt; \\e; 0.1 +&gt;.dur \\e; Pseq ((0..20), inf) +&gt;.degree \\e; Prand ((0..20), inf) +&gt;.degree \\e; (freq: Pfunc ({ 300 rrand: 1000 }), dur: Prand ([0.1, 0.2], inf)) +&gt; \\e; (freq: Pfunc ({ 30.rrand(80).midicps }), dur: Pfunc ({ 0.1 exprand: 1 }), legato: Prand ([0.1, 2], inf)) +&gt; \\e; (degree: Pseq ((0..20), inf), dur: 0.1) +!&gt;.degree \\e; Note: +&gt; adds all key-value pairs of an event to the event being played. +!&gt; replaces the contents of the event being played by the contents of the new event.","categories":[{"name":"classes","slug":"classes","permalink":"http://iani.github.io/categories/classes/"}],"tags":[{"name":"EventStream","slug":"EventStream","permalink":"http://iani.github.io/tags/EventStream/"},{"name":"EventPattern","slug":"EventPattern","permalink":"http://iani.github.io/tags/EventPattern/"},{"name":"EventStreamPlayer","slug":"EventStreamPlayer","permalink":"http://iani.github.io/tags/EventStreamPlayer/"}]},{"title":"Notification: Register a function callback to a message and a pair of objects","slug":"Notification","date":"2017-06-05T15:42:21.000Z","updated":"2017-06-08T15:58:26.000Z","comments":true,"path":"2017/06/06/Notification/","link":"","permalink":"http://iani.github.io/2017/06/06/Notification/","excerpt":"Notification is an improved version of the NotificationCenter class. This class enables objects to register a function which is called when another object changes according to some aspect. The aspect is expressed by a symbol. To trigger a notification action, one sends the message changed to an object together with a symbol expressing the aspect which changed. The function will only be evaluated for those objects which have registered to listen to the changing object according to the given aspect symbol. This allows detailed control of callback execution amongst objects of the system. For example, one can tell a gui object to change its color to green when a synth starts, and to change its color to red when that synth stops.","text":"Notification is an improved version of the NotificationCenter class. This class enables objects to register a function which is called when another object changes according to some aspect. The aspect is expressed by a symbol. To trigger a notification action, one sends the message changed to an object together with a symbol expressing the aspect which changed. The function will only be evaluated for those objects which have registered to listen to the changing object according to the given aspect symbol. This allows detailed control of callback execution amongst objects of the system. For example, one can tell a gui object to change its color to green when a synth starts, and to change its color to red when that synth stops. Notification adds the following enhancements: Ability to remove existing notification connections reliably. Several methods for easily adding or modifying connections between objects. Ability to remove all connections from an object with a single message, objectClosed, and also to execute additional actions when that object closes. Closing here means that the object is freed and will no longer be used by the system. Examples onObjectClosed Registry uses onObjectClosed to remove objects by sending them that message: *new { | ... pathAndFunc |&#10;&#9; var path, makeFunc, instance;&#10;&#9; makeFunc = pathAndFunc.last;&#10;&#9; path = pathAndFunc[0..pathAndFunc.size-2];&#10;&#9; instance = Library.global.atPath(path);&#10;&#9; if (instance.isNil) {&#10;&#9;&#9; instance = makeFunc.value;&#10;&#9;&#9; Library.global.putAtPath(path, instance);&#10;&#9;&#9; instance.onObjectClosed(this, {&#10;&#9;&#9;&#9; this.remove(*path)&#10;&#9;&#9; });&#10;&#9; };&#10;&#9; ^instance;&#10;} This is in turn used by oscFunc and rout methods for removing OSCFunc and Routine objects in order to replace them with new instances. addNotifierOneShot The addNotifierOneShot method executes the registered Function just once. This is useful when it is clear that only one call is required. For example, the onEnd and onStart methods for Node make use of the addNotifierOneShot method: + Node {&#10;&#9;onStart { | listener, action |&#10;&#9;&#9;NodeWatcher.register(this);&#10;&#9;&#9;listener.addNotifierOneShot(this, \\n_go, action);&#10;&#9;}&#10;&#10;&#9;onEnd { | listener, action |&#10;&#9;&#9;NodeWatcher.register(this);&#10;&#9;&#9;// this.isPlaying = true; // dangerous&#10;&#9;&#9;listener.addNotifierOneShot(this, \\n_end, action);&#10;&#9;}&#10;} Similar extensions can be built for whatever object needs to monitor the closing or end of an object such as closing of a Window or stopping of a Pattern.","categories":[{"name":"classes","slug":"classes","permalink":"http://iani.github.io/categories/classes/"}],"tags":[{"name":"Notification","slug":"Notification","permalink":"http://iani.github.io/tags/Notification/"}]}]}