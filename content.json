{"meta":{"title":"SC Hacks","subtitle":"SC code step-by-step","description":"Gradually introducing recipes from previous SuperCollider libraries","author":"Iannis Zannos","url":"http://iani.github.io"},"pages":[{"title":"About SC-Hacks","date":"2017-06-04T15:29:22.000Z","updated":"2017-06-08T15:42:28.000Z","comments":true,"path":"about/index.html","permalink":"http://iani.github.io/about/index.html","excerpt":"","text":"In this repository, I will review the techniques developed in my libraries for SuperCollider tiny-sc and tiny-inc. I will try to build a cleaner structure step-by-step, and reducing the code to essential features, as far as possible. The code is available in this repository: tiny-sc"},{"title":"categories","date":"2017-06-06T07:27:47.000Z","updated":"2017-06-06T07:28:59.000Z","comments":true,"path":"categories/index.html","permalink":"http://iani.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-06-06T07:24:32.000Z","updated":"2017-06-06T07:25:00.000Z","comments":true,"path":"tags/index.html","permalink":"http://iani.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Store Specs and SynthDefs in Library","slug":"StoreSpecsAndSynthDefsInLibrary","date":"2017-06-09T09:06:09.000Z","updated":"2017-06-09T09:10:00.000Z","comments":true,"path":"2017/06/09/StoreSpecsAndSynthDefsInLibrary/","link":"","permalink":"http://iani.github.io/2017/06/09/StoreSpecsAndSynthDefsInLibrary/","excerpt":"","text":"Specs and SynthDefs should be stored in Library using Registry. Advantages: simplify and unify the API for accessing Specs and SynthDefs (and SynthDescs). provide global access to Specs and SynthDefs for all environments, guis, synths using spec/synthdef name. ensure SynthDefs are always loaded when the server is rebooted, also when it is a remote server. provide easy global access to SynthDescs for automatic GUI generation.","categories":[{"name":"notes","slug":"notes","permalink":"http://iani.github.io/categories/notes/"}],"tags":[{"name":"design","slug":"design","permalink":"http://iani.github.io/tags/design/"},{"name":"TODO","slug":"TODO","permalink":"http://iani.github.io/tags/TODO/"}]},{"title":"Improving Function:eplay","slug":"ImprovingEplay","date":"2017-06-09T08:44:03.000Z","updated":"2017-06-09T09:27:14.000Z","comments":true,"path":"2017/06/09/ImprovingEplay/","link":"","permalink":"http://iani.github.io/2017/06/09/ImprovingEplay/","excerpt":"Additional TODO's for Function:eplay: Store the resulting synth in envir under [\\synths, synthName] (default for synthName: synth). If previous synth exists under [\\synths, synthName] path, then free/release it. When a synth ends, remove it from its path in envir. Make sure that when a synth previousSynth is released by replacing it through a new synth created through Function:eplay, the previousSynth ending does not remove the new synth that has already been stored in the same path. When a new synth starts or when an old synth is removed, it should emit notifications so that GUIS that depend on it update their status. Such guis may be: Start-stop buttons Guis with widgets for controlling the synths parameters. When a new synth starts, then the old gui should be replaced with a new one with widgets corresponding to the new synth's control parameters. Note: Possibly the notification should be emitted from the \\synthName under which the synth is stored. The messages may be: \\started \\stopped \\replaced The above is subject to testing.","text":"Additional TODO&apos;s for Function:eplay: Store the resulting synth in envir under [\\synths, synthName] (default for synthName: synth). If previous synth exists under [\\synths, synthName] path, then free/release it. When a synth ends, remove it from its path in envir. Make sure that when a synth previousSynth is released by replacing it through a new synth created through Function:eplay, the previousSynth ending does not remove the new synth that has already been stored in the same path. When a new synth starts or when an old synth is removed, it should emit notifications so that GUIS that depend on it update their status. Such guis may be: Start-stop buttons Guis with widgets for controlling the synths parameters. When a new synth starts, then the old gui should be replaced with a new one with widgets corresponding to the new synth&apos;s control parameters. Note: Possibly the notification should be emitted from the \\synthName under which the synth is stored. The messages may be: \\started \\stopped \\replaced The above is subject to testing. Notes When this is done, it should be possible to create multiple gui windows for multiple synths running in the same environment. However, parameters under the same name will control the parameters under that name for all synths in that environment. To develop the right code for this, do it with a plain function, adding the functionalities one-by-one. Current Function:eplay method code + Function { eplay { | envir | var synth; envir = envir.asEnvironment; envir use: { var argNames, args; argNames = this.def.argNames; args = argNames.collect ({ | name | [name, envir[name]]Mak }).select ({ | pair | pair [1].notNil; }).flat; // arg target, outbus = 0, fadeTime = 0.02, addAction=\\addToHead, args; synth = this.play ( ~target.asTarget, ~outbus ? 0, ~fadeTime ? 0.02, ~addAction ? \\addToHead, args ); argNames do: { | param | synth.addNotifier (envir, param, { | val | synth.set (param, val); }); }; }; // This is done by addNotifier anyway: // synth.onEnd (this, { synth.objectClosed }); ^synth; } } Drafts for next version See https://github.com/iani/sc-hacks/blob/master/LabCode/rebuildFunctionEplay.scd for draft to get started on this TODO.","categories":[{"name":"methods","slug":"methods","permalink":"http://iani.github.io/categories/methods/"},{"name":"notes","slug":"methods/notes","permalink":"http://iani.github.io/categories/methods/notes/"}],"tags":[{"name":"synth","slug":"synth","permalink":"http://iani.github.io/tags/synth/"},{"name":"design","slug":"design","permalink":"http://iani.github.io/tags/design/"},{"name":"TODO","slug":"TODO","permalink":"http://iani.github.io/tags/TODO/"}]},{"title":"Function:eplay : play a function and follow its arguments from an environment","slug":"Function-eplay","date":"2017-06-08T15:46:28.000Z","updated":"2017-06-08T15:59:12.000Z","comments":true,"path":"2017/06/08/Function-eplay/","link":"","permalink":"http://iani.github.io/2017/06/08/Function-eplay/","excerpt":"Provide arguments for playing a function from values found in an environment. connect all control names in the function's arguments to an environment for auto-update Free all notifications from the synth when it stops playing.","text":"Provide arguments for playing a function from values found in an environment. connect all control names in the function&apos;s arguments to an environment for auto-update Free all notifications from the synth when it stops playing. Method code + Function { eplay { | envir = \\envir | var synth; envir = envir.asEnvironment; envir use: { var argNames, args; argNames = this.def.argNames; args = argNames.collect ({ | name | [name, currentEnvironment [name]] }).select ({ | pair | pair [1].notNil; }).flat; // arg target, outbus = 0, fadeTime = 0.02, addAction=\\addToHead, args; synth = this.play ( ~target.asTarget, ~outbus ? 0, ~fadeTime ? 0.02, ~addAction ? \\addToHead, args ); argNames do: { | param | synth.addNotifier (envir, param, { | val | synth.set (param, val); }); }; }; // This is done by addNotifier anyway: // synth.onEnd (this, { synth.objectClosed }); ^synth; } } Example \\window.vlayout ( HLayout ( StaticText ().string_ (\\freq), Slider.horizontal.connectEnvir (\\freq), NumberBox ().connectEnvir (\\freq) ) ).front; //: { loop { ~freq = 400 + 400.rand; 1.wait; } }.fork; //: { | freq = 440 | SinOsc.ar (freq, 0, 0.1) }.eplay; //:","categories":[{"name":"methods","slug":"methods","permalink":"http://iani.github.io/categories/methods/"}],"tags":[{"name":"synth","slug":"synth","permalink":"http://iani.github.io/tags/synth/"},{"name":"method","slug":"method","permalink":"http://iani.github.io/tags/method/"},{"name":"environment","slug":"environment","permalink":"http://iani.github.io/tags/environment/"}]},{"title":"Building GUIs","slug":"BuildingGUIs","date":"2017-06-06T11:18:21.000Z","updated":"2017-06-06T14:24:35.000Z","comments":true,"path":"2017/06/06/BuildingGUIs/","link":"","permalink":"http://iani.github.io/2017/06/06/BuildingGUIs/","excerpt":"This notebook shows how to build GUIs starting from scratch, with minimal code and in small steps.","text":"This notebook shows how to build GUIs starting from scratch, with minimal code and in small steps. Just a window //: 1 Just a window Window (&quot;window name&quot;).front; Add a slider and resize. Use VLayout for automatic resizing. Window (&quot;window name&quot;) .view.layout_ ( VLayout ( Slider () ) ).front; //: Make the slider horizontal. Window (&quot;window name&quot;) .view.layout_ ( VLayout ( Slider () .orientation_ (\\horizontal) ) ).front; Add more sliders Use a function to avoid repeating spec code! Make the orientation an argument to enable customization. var makeSlider; makeSlider = { | orientation = \\horizontal | Slider () .orientation_ (orientation) }; Window (&quot;window name&quot;) .view.layout_ ( VLayout ( *({makeSlider.([\\horizontal, \\vertical].choose)} ! 10) ) ).front; Add more arguments for controlSpec, label, and action var makeSlider; makeSlider = { | label = &quot;slider&quot;, min = 0, max = 10, step = 0, default = 0.5, orientation = \\horizontal, action | var controlSpec; controlSpec = [min, max, \\lin, step, default].asSpec; // provide default action if needed: action ?? { action = { | value | controlSpec.map (value).postln } }; HLayout ( StaticText ().string_ (label), Slider () .action_ ({ | me | action.(me.value)}) .orientation_ (orientation) ) }; Window (&quot;window name&quot;) .view.layout_ ( VLayout ( *({makeSlider.([\\horizontal, \\vertical].choose)} ! 10) ) ).front; Add number box, after the slider. var makeSlider; makeSlider = { | label = &quot;slider&quot;, min = 0, max = 10, step = 0, default = 0.5, orientation = \\horizontal, action | var controlSpec; controlSpec = [min, max, \\lin, step, default].asSpec; // provide default action if needed: action ?? { action = { | value | controlSpec.map (value).postln } }; HLayout ( StaticText ().string_ (label), Slider () .action_ ({ | me | action.(me.value)}) .orientation_ (orientation), NumberBox ()) }; Window (&quot;window name&quot;) .view.layout_ ( VLayout ( *({makeSlider.( max: 0.0.rrand (20.0), orientation: [\\horizontal, \\vertical].choose)} ! 10) ) ).front; Add value update for number box and slider var makeSlider; makeSlider = { | label = &quot;slider&quot;, min = 0, max = 10, step = 0, default = 0.5, orientation = \\horizontal, action | var controlSpec, mappedVal, slider, numberBox; controlSpec = [min, max, \\lin, step, default].asSpec; // provide default action if needed: action ?? { action = { | value | value.postln } }; HLayout ( StaticText ().string_ (label), slider = Slider () .action_ ({ | me | mappedVal = controlSpec.map (me.value); numberBox.value = mappedVal; action.(mappedVal)}) .orientation_ (orientation), numberBox = NumberBox () .action_ ({ | me | mappedVal = me.value; slider.value = controlSpec.unmap (mappedVal); action.(mappedVal) }) ) }; Window (&quot;window name&quot;) .view.layout_ ( VLayout ( *({ | i | makeSlider.(format (&quot;slider %&quot;, i), max: 0.0.rrand (20.0), orientation: [\\horizontal, \\vertical].choose) } ! 10) ) ).front; Group the controlSpec arguments to make them more compact Also initialize the values of gui elements #+BEGIN_SRC sclang var makeSlider; makeSlider = { | label = &quot;slider&quot;, controlSpec, orientation = \\horizontal, action | var mappedVal, slider, numberBox; // convert controlSpec arg into ControlSpec controlSpec = (controlSpec ? []).asSpec; // provide default action if needed: action ?? { action = { | value | value.postln } }; HLayout ( StaticText ().string_ (label), slider = Slider () .action_ ({ | me | mappedVal = controlSpec.map (me.value); numberBox.value = mappedVal; action.(mappedVal)}) .orientation_ (orientation) .value_ (controlSpec unmap: controlSpec.default), numberBox = NumberBox () .action_ ({ | me | mappedVal = me.value; slider.value = controlSpec.unmap (mappedVal); action.(mappedVal) }) .value_ (controlSpec.default) ) }; Window (&quot;window name&quot;) .view.layout_ ( VLayout ( *([\\freq, &amp;] collect: { | name | makeSlider.(format (&quot; %&quot;, name), controlSpec: name, orientation: \\horizontal * [\\horizontal, \\vertical].choose * ) }) ) ).front; How to add all available options for Slider and NumberBox, eg. floating point digits etc? Instead of adding more arguments, move to the next step: Define a class and provide the options as defaults. Next steps &#x2026; Control a routine from a GUI. Let the GUI elements set environment variables of an environment. Let the routine run within this environment to have access to its variables. Save the current settings on file. Reload settings from file. Do similar things as with 1, but with a synth instead of a routine. Do similar things as with 1, but with an EventPattern instead of a routine.","categories":[{"name":"gui","slug":"gui","permalink":"http://iani.github.io/categories/gui/"}],"tags":[{"name":"learning","slug":"learning","permalink":"http://iani.github.io/tags/learning/"},{"name":"gui","slug":"gui","permalink":"http://iani.github.io/tags/gui/"}]},{"title":"EventStream: Modify Patterns while playing","slug":"EventStream","date":"2017-06-05T15:42:37.000Z","updated":"2017-06-06T08:20:38.000Z","comments":true,"path":"2017/06/05/EventStream/","link":"","permalink":"http://iani.github.io/2017/06/05/EventStream/","excerpt":"An EventStream makes it easy to modify patterns while playing them.","text":"An EventStream makes it easy to modify patterns while playing them. How it works An EventPattern creates EventStreams which are played by EventStreamPlayer. EventStream stores an event whose values are streams and uses this to produce a new event which is played by EventStreamPlayer. It is thus possible to modify the event stored in the EventStream while the EventStreamPlayer is playing it. This makes it easy to modify a playing pattern (which is difficult when using Pbind). Example () +&gt; \\e; 0.1 +&gt;.dur \\e; Pseq ((0..20), inf) +&gt;.degree \\e; Prand ((0..20), inf) +&gt;.degree \\e; (freq: Pfunc ({ 300 rrand: 1000 }), dur: Prand ([0.1, 0.2], inf)) +&gt; \\e; (freq: Pfunc ({ 30.rrand(80).midicps }), dur: Pfunc ({ 0.1 exprand: 1 }), legato: Prand ([0.1, 2], inf)) +&gt; \\e; (degree: Pseq ((0..20), inf), dur: 0.1) +!&gt;.degree \\e; Note: +&gt; adds all key-value pairs of an event to the event being played. +!&gt; replaces the contents of the event being played by the contents of the new event.","categories":[{"name":"classes","slug":"classes","permalink":"http://iani.github.io/categories/classes/"}],"tags":[{"name":"EventStream","slug":"EventStream","permalink":"http://iani.github.io/tags/EventStream/"},{"name":"EventPattern","slug":"EventPattern","permalink":"http://iani.github.io/tags/EventPattern/"},{"name":"EventStreamPlayer","slug":"EventStreamPlayer","permalink":"http://iani.github.io/tags/EventStreamPlayer/"}]},{"title":"Notification: Register a function callback to a message and a pair of objects","slug":"Notification","date":"2017-06-05T15:42:21.000Z","updated":"2017-06-08T15:58:26.000Z","comments":true,"path":"2017/06/05/Notification/","link":"","permalink":"http://iani.github.io/2017/06/05/Notification/","excerpt":"Notification is an improved version of the NotificationCenter class. This class enables objects to register a function which is called when another object changes according to some aspect. The aspect is expressed by a symbol. To trigger a notification action, one sends the message changed to an object together with a symbol expressing the aspect which changed. The function will only be evaluated for those objects which have registered to listen to the changing object according to the given aspect symbol. This allows detailed control of callback execution amongst objects of the system. For example, one can tell a gui object to change its color to green when a synth starts, and to change its color to red when that synth stops.","text":"Notification is an improved version of the NotificationCenter class. This class enables objects to register a function which is called when another object changes according to some aspect. The aspect is expressed by a symbol. To trigger a notification action, one sends the message changed to an object together with a symbol expressing the aspect which changed. The function will only be evaluated for those objects which have registered to listen to the changing object according to the given aspect symbol. This allows detailed control of callback execution amongst objects of the system. For example, one can tell a gui object to change its color to green when a synth starts, and to change its color to red when that synth stops. Notification adds the following enhancements: Ability to remove existing notification connections reliably. Several methods for easily adding or modifying connections between objects. Ability to remove all connections from an object with a single message, objectClosed, and also to execute additional actions when that object closes. Closing here means that the object is freed and will no longer be used by the system. Examples onObjectClosed Registry uses onObjectClosed to remove objects by sending them that message: *new { | ... pathAndFunc | var path, makeFunc, instance; makeFunc = pathAndFunc.last; path = pathAndFunc[0..pathAndFunc.size-2]; instance = Library.global.atPath(path); if (instance.isNil) { instance = makeFunc.value; Library.global.putAtPath(path, instance); instance.onObjectClosed(this, { this.remove(*path) }); }; ^instance; } This is in turn used by oscFunc and rout methods for removing OSCFunc and Routine objects in order to replace them with new instances. addNotifierOneShot The addNotifierOneShot method executes the registered Function just once. This is useful when it is clear that only one call is required. For example, the onEnd and onStart methods for Node make use of the addNotifierOneShot method: + Node { onStart { | listener, action | NodeWatcher.register(this); listener.addNotifierOneShot(this, \\n_go, action); } onEnd { | listener, action | NodeWatcher.register(this); // this.isPlaying = true; // dangerous listener.addNotifierOneShot(this, \\n_end, action); } } Similar extensions can be built for whatever object needs to monitor the closing or end of an object such as closing of a Window or stopping of a Pattern.","categories":[{"name":"classes","slug":"classes","permalink":"http://iani.github.io/categories/classes/"}],"tags":[{"name":"Notification","slug":"Notification","permalink":"http://iani.github.io/tags/Notification/"}]},{"title":"Registry: Hierarchical Namespaces","slug":"Registry","date":"2017-06-05T15:41:22.000Z","updated":"2017-06-05T17:15:07.000Z","comments":true,"path":"2017/06/05/Registry/","link":"","permalink":"http://iani.github.io/2017/06/05/Registry/","excerpt":"This class helps to store objects and to retrieve them using a key. This is similar to the way that with classes such as Pdef, Ndef, OSCdef work, but Registry can be used to add the same feature ot any class, without subclassing it. To create this behavior instead, add a method to Symbol for accessing the kind of object needed. For example: \\aSymbol.oscFunc. This also allows easier customization of how the object is created if not found.","text":"This class helps to store objects and to retrieve them using a key. This is similar to the way that with classes such as Pdef, Ndef, OSCdef work, but Registry can be used to add the same feature ot any class, without subclassing it. To create this behavior instead, add a method to Symbol for accessing the kind of object needed. For example: \\aSymbol.oscFunc. This also allows easier customization of how the object is created if not found. How it works Store an object in Library under an array of objects (called a path). When accessing the path, create the object if not already stored, else return the previously stored object. Example This is the code that makes it possible to create or modify an OSCFunc bound to a symbol. It defines the methods Function:oscFunc and Symbol:removeOsc. + Function { oscFunc { | path | path.removeOsc; ^Registry (&apos;oscFuncs&apos;, path, { OSCFunc (this, path) }); } } + Symbol { removeOsc { Registry.doIfFound (&apos;oscFuncs&apos;, this, { | found | found.objectClosed; found.free; }); } }","categories":[{"name":"classes","slug":"classes","permalink":"http://iani.github.io/categories/classes/"}],"tags":[{"name":"registry","slug":"registry","permalink":"http://iani.github.io/tags/registry/"}]}]}