{"meta":{"title":"SC Hacks","subtitle":"SC code step-by-step","description":"Gradually introducing recipe elements from previous SuperCollider libraries","author":"Iannis Zannos","url":"http://iani.github.io"},"pages":[{"title":"About sc-hacks","date":"2017-06-04T15:29:22.000Z","updated":"2017-06-04T15:45:29.000Z","comments":true,"path":"about/index.html","permalink":"http://iani.github.io/about/index.html","excerpt":"","text":"In this repository, I will review the techniques developed in my libraries for SuperCollider tiny-sc and tiny-inc. I will try to build a cleaner structure step-by-step, and reducing the code to essential features, as far as possible."}],"posts":[{"title":"Registry: Hierarchical Namespaces","slug":"Registry","date":"2017-06-04T16:24:29.000Z","updated":"2017-06-04T16:30:03.000Z","comments":true,"path":"2017/06/04/Registry/","link":"","permalink":"http://iani.github.io/2017/06/04/Registry/","excerpt":"","text":"Registry class. This class make its possible to store objects and retrieve them, as done with classes such as Pdef, Ndef, OSCdef etc, but without having to subclass. To create this behavior instead, add a method to Symbol for accessing the kind of object needed. For example: \\aSymbol.oscFunc. This also allows easier customization of how the object is created if not found. Store an object in Library under an array of objects (called a path). When accessing the path, create the object if not already stored, else return the previously stored object. Author: Ioannis Zannos Created: 2017-06-04 Sun 19:30 Emacs 25.1.1 (Org mode 8.2.10) Validate","categories":[{"name":"classes","slug":"classes","permalink":"http://iani.github.io/categories/classes/"}],"tags":[{"name":"registry","slug":"registry","permalink":"http://iani.github.io/tags/registry/"}]}]}